name: Verify All Status Checks

on:
  pull_request:
    types: [synchronize, opened, reopened]
  check_suite:
    types: [completed]
  check_run:
    types: [completed]
  workflow_dispatch:

jobs:
  check-statuses:
    runs-on: ubuntu-latest
    if: github.event_name != 'check_run' || github.event.check_run.name != 'check-statuses'
    steps:
      - name: Wait for all checks to complete and verify
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = context.payload.pull_request 
              ? context.payload.pull_request.head.sha 
              : (context.payload.check_suite || context.payload.check_run).head_sha;

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const thisCheckName = "check-statuses";

            const sleep = ms => new Promise(res => setTimeout(res, ms));
            const maxAttempts = 20; // 5 minutes (20 * 15s)
            let attempt = 0;

            // Wait for other checks to appear
            while (attempt < maxAttempts) {
              attempt++;
              const checks = await github.rest.checks.listForRef({ owner, repo, ref: sha });
              const otherChecks = checks.data.check_runs.filter(run => run.name !== thisCheckName);

              if (otherChecks.length === 0) {
                console.log(`[${attempt}/${maxAttempts}] No other checks found. Waiting...`);
                await sleep(15000);
                continue;
              }

              // Wait for all checks to complete
              let innerAttempt = 0;
              while (innerAttempt < maxAttempts) {
                innerAttempt++;
                const checksInner = await github.rest.checks.listForRef({ owner, repo, ref: sha });
                const otherChecksInner = checksInner.data.check_runs.filter(run => run.name !== thisCheckName);

                const incomplete = otherChecksInner.filter(run => run.status !== "completed");
                if (incomplete.length > 0) {
                  console.log(`[Inner ${innerAttempt}/${maxAttempts}] Waiting for ${incomplete.length} checks to complete...`);
                  await sleep(15000);
                  continue;
                }

                const passed = otherChecksInner.filter(run => run.conclusion === "success");
                const failed = otherChecksInner.filter(run => run.conclusion !== "success");

                if (passed.length > 0) {
                  console.log("✅ Passed checks:");
                  passed.forEach(run => console.log(`  - ${run.name}`));
                }

                if (failed.length > 0) {
                  console.log("❌ Failed checks:");
                  failed.forEach(run => console.log(`  - ${run.name}: ${run.conclusion}`));
                  core.setFailed("Not all checks passed.");
                } else {
                  console.log("✅ All checks passed.");
                }
                return;
              }

              core.setFailed("⏱️ Timeout waiting for all checks to complete.");
              return;
            }

            core.setFailed("⏱️ Timeout waiting for checks to appear.");
